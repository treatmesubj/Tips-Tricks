db2cli execsql -dsn SMS -user J3J3455 -passwd ***** -inputsql test.sql -statementdelimiter ; -outfile test_results.csv

db2cli validate -connect -dsn SMS -user J3J3455 -passwd ****

db2cli validate -dsn SMS -connect -odbcdsn -user J3J3455 -passwd ****

**ini file: C:\ProgramData\IBM\DB2\IBMDBCL1\cfg\db2cli.ini

`````````````````````````````````````

Run SQL in Excel

Data > Get Data > From Other Sources > From ODBC
	Data-source/DSN: SMS ~~~ these data-source aliases just come from your db2cli.ini file at C:\ProgramData\IBM\DB2\IBMDBCL1\cfg\db2cli.ini
	> Advanced Properties
	SQL Statement: SQL-code
	> OK
```````````````````````````````````


Create Data Model for Formulated Pivot

Data > Existing Connections >T (Tab) Tables > Static Table: table

Insert > PivotTable
	>x Use this workbook's Data Model
once pivot is done being formatted,

Analyze > OLAP Tools > Convert to Formulas

```````````````````````````````````````````````````

Create Power Pivot Connection

Power Pivot > Manage > From Other Sources > ODBC
	> Build
		>T (Tab) Provider
			> IBM OLE DB Provider
			> Next
		>T (Tab) All
			Data Source: SMS ~~~ from db2cli.ini file
			Password: *******
			User ID: *******
	> Next
		>x Write a query that will specify the data to import
			> SQL Statement: Select * from whatever
			> Validate
			> Finish


```````````````````````````````````````````````````````````````
Power Query M Query Results Cleaning

let 
    Source = Odbc.Query("dsn=SMS",
"<---SQL Statement----->"
),
    #"Appended Query" = Table.Combine({Source, dummy_rows}), //append dummy rows
    text_cols = Table.ColumnsOfType(#"Appended Query", {type nullable text}),
    trimmed_table = Table.TransformColumns(#"Appended Query", List.Transform(text_cols, each {_, Text.Trim})) //strip crap
    //res_table = Table.TransformColumnTypes(Source, List.Transform(Table.ColumnNames(Source), each {_, type text})), //data-type text
    //fin_res_table = Table.TransformColumns(res_table, List.Transform(Table.ColumnNames(res_table), each {_, Text.Clean})) //strip invalid chars
in
    trimmed_table


